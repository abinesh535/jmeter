<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Working UI" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">accounts.google.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">devlocal.kantimehealth.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">192.168.4.74</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://accounts.google.com/gsi/log?client_id=190249932785-q07fsjd1gg7oe61m3qd0j4tfuivo7df6.apps.googleusercontent.com&amp;as=sd4QC5Netm5fRpoUkUjCrA&amp;event=onetap.closed.tapOutside" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="as" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">as</stringProp>
                  <stringProp name="Argument.value">sd4QC5Netm5fRpoUkUjCrA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">onetap.closed.tapOutside</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">190249932785-q07fsjd1gg7oe61m3qd0j4tfuivo7df6.apps.googleusercontent.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gsi/log</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/identity/v2/Accounts/Authorize" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ssoProviders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ssoProviders</stringProp>
                  <stringProp name="Argument.value">[{&quot;sso_provider_master_id&quot;:1,&quot;provider_name&quot;:&quot;google&quot;,&quot;logo&quot;:&quot;&lt;svg data-name=\&quot;Component 4 - 1\&quot; xmlns=\&quot;http://www.w3.org/2000/svg\&quot; width=\&quot;33\&quot; height=\&quot;33\&quot; viewBox=\&quot;0 0 33 33.8\&quot;&gt;&lt;defs&gt;&lt;clipPath id=\&quot;a\&quot;&gt;&lt;path data-name=\&quot;Rectangle 71\&quot; fill=\&quot;none\&quot; d=\&quot;M0 0H33V33.8H0z\&quot;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;g data-name=\&quot;Group 154\&quot; clip-path=\&quot;url(#a)\&quot;&gt;&lt;path data-name=\&quot;Path 70\&quot; d=\&quot;M33 17.3a19.5 19.5 0 0 0-.2-3.2h-16v6.3H26a7.8 7.8 0 0 1-3.4 5v4.3H28a16.5 16.5 0 0 0 5-12.4\&quot; fill=\&quot;#4285f4\&quot;/&gt;&lt;path data-name=\&quot;Path 71\&quot; d=\&quot;M16.9 33.8A16 16 0 0 0 28 29.7l-5.4-4.3a10.2 10.2 0 0 1-15.2-5.3H1.8v4.3a16.9 16.9 0 0 0 15 9.4\&quot; fill=\&quot;#34a853\&quot;/&gt;&lt;path data-name=\&quot;Path 72\&quot; d=\&quot;M7.4 20.1a9.8 9.8 0 0 1-.5-3.2 10.2 10.2 0 0 1 .5-3.2V9.3H1.8a16.7 16.7 0 0 0 0 15.1Z\&quot; fill=\&quot;#fbbc05\&quot;/&gt;&lt;path data-name=\&quot;Path 73\&quot; d=\&quot;M16.9 6.7a9.2 9.2 0 0 1 6.4 2.5l4.9-4.8A16.1 16.1 0 0 0 16.9 0a16.9 16.9 0 0 0-15 9.3l5.5 4.4a10 10 0 0 1 9.5-7\&quot; fill=\&quot;#ea4335\&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;&quot;},{&quot;sso_provider_master_id&quot;:2,&quot;provider_name&quot;:&quot;microsoft&quot;,&quot;logo&quot;:&quot;&lt;svg xmlns=\&quot;http://www.w3.org/2000/svg\&quot; version=\&quot;1.1\&quot; id=\&quot;prefix__Layer_1\&quot; x=\&quot;0\&quot; y=\&quot;0\&quot; width=\&quot;33\&quot; height=\&quot;33\&quot; viewBox=\&quot;0 0 560 600\&quot; xml:space=\&quot;preserve\&quot; enable-background=\&quot;new 0 0 560 600\&quot;&gt;&lt;style&gt;.prefix__st0{fill:#5868be}.prefix__st1{fill:#4bb3ea}.prefix__st2{fill:#9475d1}.prefix__st3{fill:#c18eec}&lt;/style&gt;&lt;path class=\&quot;prefix__st0\&quot; d=\&quot;M183.1 236c18.7-3.3 36.6-19 54.3-26 4.7-1.9 17.4-3.5 19.8-8.4 3.9-8 2.4-23.6 3.7-32.5 2.3-16.3 5.7-32.3 8.3-48.5 2.1-12.6 3.4-28.2 9.1-39.7 12-24.3 45.3-35.7 61.3-56.5a119.3 119.3 0 0 0-52.7-15.2c-15 0-29.2.4-43.6 5.2-25.8 8.6-44.8 36-53.6 60.7-7.8 21.8-6.5 44.1-6.5 66.9v94z\&quot;/&gt;&lt;path class=\&quot;prefix__st2\&quot; d=\&quot;m230.6 19 1 1-1-1m-28.1 340.1c-3.8-12-11.2-22.6-14.8-34.9-5.2-17.8-4.6-36.9-4.6-55.2 0-11.1-.9-22.2 1.9-32.9-3.3-4.3-1.9-13-1.9-18.2l.8-53.6c0-40.1-4.7-71.5 13.6-105.5 8.8-15.8 22.1-25.2 33.1-38.8-8.2 2.4-15.7 7.9-23.3 11.8-15.9 8.4-31.7 17.1-47.5 25.7C101.5 89 23.3 114.9 10 188.6c-2.1 11.6-4.5 31.3-.7 42.6 4.4 13.1 19.8 27.2 29.4 36.8a364 364 0 0 0 96.9 70.5c17 8.5 47.7 27.1 66.9 20.6z\&quot;/&gt;&lt;path class=\&quot;prefix__st1\&quot; d=\&quot;m330.4 19.9 1 1-1-1m1.9 1 1 1-1-1m-76.5 182.2v1c14.7-1.2 28.8-3.2 43.6-.6 23.1 4.2 43.5 16.1 64 26.9 20.3 10.7 41.5 20.3 62 30.6 28.7 14.3 61.9 26.7 86.3 48 21.4 18.8 38.2 48.2 38.8 77.3 3.1-7.4 1-19.1 1-27.1V299c0-54.9 11.2-120.7-27.4-165.7-25.4-29.6-68.4-46.6-102.4-64.2-21.2-11-42-22.7-63-34-5.4-2.9-17-12.4-23.3-10.9a77.2 77.2 0 0 0-30 18.5c-9.4 9.4-21 25.2-27 37.3-9.2 18.7-11.6 46.4-14.5 66.9-1.7 11.7-4.3 24.1-5 35.9-1 9.6-.3 8.4-3.1 20.3z\&quot;/&gt;&lt;path class=\&quot;prefix__st0\&quot; d=\&quot;M8.7 231.2v119.2c0 24.8-1.8 51.1 3.9 73.7a108.6 108.6 0 0 0 50.5 65.8c16.5 4.9 26.8 5.5 35.2 6.8 15.5 2.4 21.2.1 36.4-3.7 16.8-4.2 31.5-13 46.5-21.1 32.7-17.7 65.5-39.2 99.8-53.6l2.9-2.9c-25.5-15-68.7-27.6-81.6-56.7-16.7 7.2-39.7-8.3-55.1-15a343 343 0 0 1-110.4-78.5c-10.2-10.7-18-23.5-28.1-34M424.3 425a204.2 204.2 0 0 1-18.7 97.9c-2.9 6.3-9.3 14.2-8.4 21.3 25-13.2 49.7-26.9 74.6-40.4 20.6-11.1 40.8-21.9 55.3-41a113.8 113.8 0 0 0-12.7-152.1c-23.2-21.7-56.2-33.8-84.3-47.8-17.4-8.7-35.5-21.5-54.3-26.9v55.2c0 11.4 1.3 24.6-3.2 35.2 0 0 24.3 25.7 29.4 26.8l-1 2.9 3.9 3.9h1l-1-2.9h1v4.9l1.9 1.9\&quot;/&gt;&lt;path class=\&quot;prefix__st2\&quot; d=\&quot;M373.6 324.1c-3 7.9-6 16.6-10.1 24.4-7.8 15-19 28.4-32.2 39-10 8-21.7 13.8-32.9 19.9-3.5 1.9-9.7 5.1-14.5 8.1-1.5 3.8 4 10.8 5 14.5a89.8 89.8 0 0 1 3.6 30c-4.4 46.5-34.8 88.8-75.4 111.4v2.9c15.9 6.6 30.1 14.1 47.5 16.2 51.3 6.3 89.4-25.1 132.8-46.2.4-7.5 5.8-14.5 8.9-21.3a286 286 0 0 0 15.2-44.6c24.2-141.9-47.3-154-47.3-154m1.7.8 1 1-1-1z\&quot;/&gt;&lt;path class=\&quot;prefix__st3\&quot; d=\&quot;M283.9 415.3c-20.4 7.3-40 12.6-64.9 32.9-33.7 18.2-66.4 45.7-105.6 48.4a128 128 0 0 1-49.4-7.7l-2.9-.3 157.1 85.7-1.1-1.1c9.9-10.8 21.1-11.6 34.9-28.1 30.6-31.3 55.8-87.1 31.9-129.8z\&quot;/&gt;&lt;/svg&gt;&quot;},{&quot;sso_provider_master_id&quot;:3,&quot;provider_name&quot;:&quot;okta&quot;,&quot;logo&quot;:&quot;&lt;svg xmlns=\&quot;http://www.w3.org/2000/svg\&quot; width=\&quot;90\&quot; height=\&quot;33\&quot; xmlns:v=\&quot;https://vecta.io/nano\&quot;&gt;&lt;defs&gt;&lt;clipPath id=\&quot;A\&quot;&gt;&lt;path fill=\&quot;none\&quot; d=\&quot;M0 0h84.857v28.575H0z\&quot;/&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;g clip-path=\&quot;url(#A)\&quot; fill=\&quot;#007dc1\&quot;&gt;&lt;path d=\&quot;M10.671 7.17a10.671 10.671 0 1 0 10.671 10.671A10.665 10.665 0 0 0 10.671 7.17m0 16.017a5.346 5.346 0 1 1 5.346-5.346 5.351 5.351 0 0 1-5.346 5.346m18.753-1.761a.94.94 0 0 1 1.612-.658l7.107 7.4a.752.752 0 0 0 .382.255 1.467 1.467 0 0 0 .467.042h4.815a.935.935 0 0 0 .721-1.506L36.552 18.8l-.424-.424c-.913-1.082-.806-1.506.233-2.609L42.683 8.7a.922.922 0 0 0-.743-1.484h-4.37a1.32 1.32 0 0 0-.424.042.794.794 0 0 0-.424.255c-.022.021-3.522 3.8-5.686 6.109a.956.956 0 0 1-1.654-.657V.848A.847.847 0 0 0 28.469 0h-3.564a.817.817 0 0 0-.912.763v26.858c0 .615.509.784.934.784h3.564a.861.861 0 0 0 .909-.805v-6.174zm29.106 6.068l-.382-3.564a.845.845 0 0 0-1-.742 5.483 5.483 0 0 1-.827.063A5.347 5.347 0 0 1 51 18.2v-4.665a1 1 0 0 1 1-1.035h4.773a.891.891 0 0 0 .849-.913V8.21a.891.891 0 0 0-.806-1H52a.991.991 0 0 1-1.018-.954V.849A.863.863 0 0 0 50.066 0h-3.543a.812.812 0 0 0-.87.828V18.2a10.661 10.661 0 0 0 10.671 10.376 10.523 10.523 0 0 0 1.421-.106.868.868 0 0 0 .785-.976m25.712-4.477c-3.013 0-3.479-1.082-3.479-5.134V8.1a.915.915 0 0 0-.934-.912h-3.564a.935.935 0 0 0-.933.912v.445a10.536 10.536 0 0 0-5.261-1.4 10.671 10.671 0 1 0 6.937 18.775 5.753 5.753 0 0 0 5.134 2.567c.424 0 2.715.084 2.715-1V23.7a.673.673 0 0 0-.615-.679m-14.15.17a5.346 5.346 0 1 1 5.346-5.346 5.351 5.351 0 0 1-5.346 5.346\&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="LoginId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">LoginId</stringProp>
                  <stringProp name="Argument.value">kadmin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
                  <stringProp name="Argument.value">CfDJ8MeFlabevqJIn8ezlM74n1tCjBzgPABy6Pg4N2vJQH-tgyJFjYi2Ea60H8lzMgAU0QvCvNejKsRJGySjwibCFGdxjsSy9dsclb9VTz1WS1o85zWkUzMaPiGA-4ZfipJYZ_T1HcbPy2zPEOSC8s-bXaI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ClientKey</stringProp>
                  <stringProp name="Argument.value">190249932785-q07fsjd1gg7oe61m3qd0j4tfuivo7df6.apps.googleusercontent.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SSOProviderId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SSOProviderId</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Product" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Product</stringProp>
                  <stringProp name="Argument.value">hh_admin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RedirectURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">RedirectURI</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="message" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">message</stringProp>
                  <stringProp name="Argument.value">Welcome to zadmin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="title" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">title</stringProp>
                  <stringProp name="Argument.value">Welcome to zadmin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ResponseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ResponseType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Nonce</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Scope</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="State" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">State</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ClientID</stringProp>
                  <stringProp name="Argument.value">kantimeclient</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isRelogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isRelogin</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="InstanceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">InstanceType</stringProp>
                  <stringProp name="Argument.value">Qa</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="login_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">login_uri</stringProp>
                  <stringProp name="Argument.value">https://devlocal.kantimehealth.net/identity/v2/Accounts/ExternalLoginCallBackOneTap</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Password</stringProp>
                  <stringProp name="Argument.value">demo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">identity/v2/Accounts/Authorize</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://192.168.4.74/workingzadmin/Services/IdentitySSOHandler.ashx?code=d8a411771bc9c209e2bb8e0306f0ed3e0add44fd736bd41ae443515a8172425e" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                  <stringProp name="Argument.value">d8a411771bc9c209e2bb8e0306f0ed3e0add44fd736bd41ae443515a8172425e</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">workingzadmin/Services/IdentitySSOHandler.ashx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">3504.0</stringProp>
              <stringProp name="ConstantTimer.delay">1752</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 3504 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://192.168.4.74/workingzadmin/UI/Common/HHAList.aspx/GetNewsfeedlist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">workingzadmin/UI/Common/HHAList.aspx/GetNewsfeedlist</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://192.168.4.74/workingzadmin/UI/Common/HHAList.aspx/getHHAInfo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;HHAID&quot;:0,&quot;DataSource&quot;:&quot;0&quot;,&quot;InitialCatalog&quot;:&quot;0&quot;,&quot;Status&quot;:&quot;Active&quot;,&quot;SEARCH_STRING&quot;:&quot;&quot;,&quot;PageContext&quot;:&quot;HHA&quot;,&quot;TimeZone&quot;:&quot;ALL&quot;,&quot;City&quot;:&quot;ALL&quot;,&quot;State&quot;:&quot;ALL&quot;,&quot;CareType&quot;:&quot;ALL&quot;,&quot;sortOrderAscending&quot;:&quot;1&quot;,&quot;sortBy&quot;:&quot;1&quot;,&quot;KanTimeLob&quot;:&quot;ALL&quot;,&quot;TestAgency&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">workingzadmin/UI/Common/HHAList.aspx/getHHAInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://192.168.4.74/workingzadmin/UI/Common/HHAList.aspx/GetSupportUserDetails" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;HHAID&quot;:901246,&quot;WebInstanceCode&quot;:&quot;&quot;,&quot;Server&quot;:&quot;192.168.3.226&quot;,&quot;DataBase&quot;:&quot;Working_Zephyr9&quot;,&quot;DataBaseInternalID&quot;:&quot;null&quot;,&quot;DataBaseID&quot;:2029,&quot;Role_ID&quot;:0,&quot;HHAID_Live&quot;:&quot;0&quot;,&quot;HHAID_Training&quot;:&quot;0&quot;,&quot;AllowViewOnlyAccess&quot;:&quot;false&quot;,&quot;BlockExcelExport&quot;:&quot;false&quot;,&quot;BlockPDFPrinting&quot;:&quot;false&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">workingzadmin/UI/Common/HHAList.aspx/GetSupportUserDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/working/Services/IdentitySSOHandlerForLaunch.ashx?access_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ2NzhGOTY3RUQyQTQwOEYwMzUwNUEwM0M5OUFDRTcyMUE2QTQwMTUiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJzdXBwb3J0QHo5LmNvbSIsImF1ZCI6WyJoaCIsImhod29ya2luZ24iLCJoaF9kZXYiLCJoaF9sbXMiXSwiZmlyc3RuYW1lIjoiU3VwcG9ydCIsImxhc3RuYW1lIjoiS2FuVGltZSIsInVpZCI6IjIyMzI3MiIsInBpZCI6IjkwMTI0NiIsIm5iZiI6MTY5MTU2MTEwNywiZXhwIjoxNjkxNTY0NzA3LCJpc3MiOiJodHRwczovL2RldmxvY2FsLmthbnRpbWVoZWFsdGgubmV0L2lkZW50aXR5L3YyIn0.KK5kNtHbPTb4zZIJ6jp0-vEbOtOa4qITRomQpE5HvvVmJvA9foPtdAGO5RW5YzuzyHEEGv05JCSzyUdHR_3HTwX-dasxteo-6LMsOZnBZnGa5j6UcHebWw2hY3kK7Fy4rrNcPmqZwWRvV4QQzE2gdYbCr4zpYy5u5mI6aLKKqdqL-1Ml2ZnXgJ7z2QY2NlMUcr7y5Rv485rVilw9YG4rz-0k_tu0SHcQo9-0iNKN-z5P871V5moUfVPC5ygvHxJUQvAkDTxM5KYO-GbIuTIQar2VmNUFhh5I3I2P52F_Dy5NaV_8uIqJ0uJGvhHO5Ye4gCEFWbu53ZX_KV0lR4ImhJ8yQLbPW6jKnMkx34TQ-_nTbWhljLq3plv592_H4-Zh8HfONoH_pl3NGHPPQR7RZS9nf8BKRu7uh2KBqheuQgMvSgtzyJqPLarzJXmwbH2qmc2-speTWr9s3tu7mBepKiaVW6QlSG77_APKqvMxXA8nENQeiIt_T6E8Xa805wUdRxW6Nik5z5fZoknRaMzb4nEKmZ_OTKonrcuasT_GDU-dlT4sWNnpXJ7cs38Ge6DZ7eP0kZFBBKb11WW3Dvu0xE_ZGpCmn_hwVcYDBpVIsMm6a4gBozCVy9-Bf2bk5u5NSVKiLR3Sz4TpF4fBc_O4-Q1fi8cOT4-LCxVp0DC5BP4&amp;refresh_token=80dc2cc93e943e8256c9cf735f6b85f1f9d37bf6276f1eb1a6ebc08dd0eb8404&amp;zadminuserparams=BoYPxtEKmmFo12UKxwT3MprSq5uQckEml0SmawlumvGLbV5ciDaTkZCWuqtv+KKlXTYrefxBsi3TEuo+JtDjbx64ymxqIsKwDsORE65TiFH+BYMItt9Alf835oFm8gSfMnNUFJMuG5zPjHL2SQgoDrA+uuegECSVZb7RM0hEaW2D65lXGM+inirsOFGqe5MMSudnE7eF4DmbjImWbPmrOC2KbUaIfteRGPzxqbmRidGKofJTyswZuxguWe9+SuXMVo9EbdLWzA8KKzJ7hsqdav9uDjQi1aP+oDsJ7pv5Rpo9tHRe3Iz5ypQyp+OUe5B3xVKAmj9sCSjVXjuAIGdpsDRId6KbVx+/ylhkhva+SNYuh49k5RPQqYsZCsRsFSf6SxbHGSArVTCJAPLgXoDe+A==" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="access_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">access_token</stringProp>
                  <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ2NzhGOTY3RUQyQTQwOEYwMzUwNUEwM0M5OUFDRTcyMUE2QTQwMTUiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJzdXBwb3J0QHo5LmNvbSIsImF1ZCI6WyJoaCIsImhod29ya2luZ24iLCJoaF9kZXYiLCJoaF9sbXMiXSwiZmlyc3RuYW1lIjoiU3VwcG9ydCIsImxhc3RuYW1lIjoiS2FuVGltZSIsInVpZCI6IjIyMzI3MiIsInBpZCI6IjkwMTI0NiIsIm5iZiI6MTY5MTU2MTEwNywiZXhwIjoxNjkxNTY0NzA3LCJpc3MiOiJodHRwczovL2RldmxvY2FsLmthbnRpbWVoZWFsdGgubmV0L2lkZW50aXR5L3YyIn0.KK5kNtHbPTb4zZIJ6jp0-vEbOtOa4qITRomQpE5HvvVmJvA9foPtdAGO5RW5YzuzyHEEGv05JCSzyUdHR_3HTwX-dasxteo-6LMsOZnBZnGa5j6UcHebWw2hY3kK7Fy4rrNcPmqZwWRvV4QQzE2gdYbCr4zpYy5u5mI6aLKKqdqL-1Ml2ZnXgJ7z2QY2NlMUcr7y5Rv485rVilw9YG4rz-0k_tu0SHcQo9-0iNKN-z5P871V5moUfVPC5ygvHxJUQvAkDTxM5KYO-GbIuTIQar2VmNUFhh5I3I2P52F_Dy5NaV_8uIqJ0uJGvhHO5Ye4gCEFWbu53ZX_KV0lR4ImhJ8yQLbPW6jKnMkx34TQ-_nTbWhljLq3plv592_H4-Zh8HfONoH_pl3NGHPPQR7RZS9nf8BKRu7uh2KBqheuQgMvSgtzyJqPLarzJXmwbH2qmc2-speTWr9s3tu7mBepKiaVW6QlSG77_APKqvMxXA8nENQeiIt_T6E8Xa805wUdRxW6Nik5z5fZoknRaMzb4nEKmZ_OTKonrcuasT_GDU-dlT4sWNnpXJ7cs38Ge6DZ7eP0kZFBBKb11WW3Dvu0xE_ZGpCmn_hwVcYDBpVIsMm6a4gBozCVy9-Bf2bk5u5NSVKiLR3Sz4TpF4fBc_O4-Q1fi8cOT4-LCxVp0DC5BP4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="refresh_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">refresh_token</stringProp>
                  <stringProp name="Argument.value">80dc2cc93e943e8256c9cf735f6b85f1f9d37bf6276f1eb1a6ebc08dd0eb8404</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="zadminuserparams" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">zadminuserparams</stringProp>
                  <stringProp name="Argument.value">BoYPxtEKmmFo12UKxwT3MprSq5uQckEml0SmawlumvGLbV5ciDaTkZCWuqtv KKlXTYrefxBsi3TEuo JtDjbx64ymxqIsKwDsORE65TiFH BYMItt9Alf835oFm8gSfMnNUFJMuG5zPjHL2SQgoDrA uuegECSVZb7RM0hEaW2D65lXGM inirsOFGqe5MMSudnE7eF4DmbjImWbPmrOC2KbUaIfteRGPzxqbmRidGKofJTyswZuxguWe9 SuXMVo9EbdLWzA8KKzJ7hsqdav9uDjQi1aP oDsJ7pv5Rpo9tHRe3Iz5ypQyp OUe5B3xVKAmj9sCSjVXjuAIGdpsDRId6KbVx /ylhkhva SNYuh49k5RPQqYsZCsRsFSf6SxbHGSArVTCJAPLgXoDe A==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">working/Services/IdentitySSOHandlerForLaunch.ashx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">16968.0</stringProp>
              <stringProp name="ConstantTimer.delay">8484</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 16968 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetSession_GlobalSearch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetSession_GlobalSearch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;searchKey&quot;:&quot;&quot;,&quot;pageID&quot;:0,&quot;location&quot;:0,&quot;payerType&quot;:0,&quot;payerSource&quot;:0,&quot;status&quot;:1,&quot;onlyAuthRequiredClient&quot;:0,&quot;clinician&quot;:0,&quot;caseManager&quot;:0,&quot;QA&quot;:0,&quot;CareType&quot;:0,&quot;lob&quot;:0,&quot;PatientType&quot;:0,&quot;scheduleStartDate&quot;:&quot;&quot;,&quot;scheduleEndDate&quot;:&quot;&quot;,&quot;ShowAllClients&quot;:0,&quot;ShowMissedVisitClients&quot;:1,&quot;ShowAllLOB&quot;:0,&quot;LOBMultiSelect&quot;:&quot;&quot;,&quot;TeamMultiSelect&quot;:&quot;&quot;,&quot;ClientStatus&quot;:&quot;Active,PSOC,TIFF,Hold,Disch,Inactive,&quot;,&quot;LocationMultiSelect&quot;:&quot;&quot;,&quot;IsMSPCLaim&quot;:0,&quot;IsClientsAllAdmits&quot;:0,&quot;SMSEnabled&quot;:0,&quot;IsListOnlyOASISClients&quot;:0,&quot;IncludeIntake&quot;:0,&quot;ShowOnlyPCAClients&quot;:0,&quot;IsonlyCDSClients&quot;:2,&quot;NotifydEnabled&quot;:0,&quot;showonlyNotAttachedtoEmployer&quot;:0,&quot;Context&quot;:&quot;GlobalSearch&quot;,&quot;POCStatus&quot;:&quot;0&quot;,&quot;FOBAllocated&quot;:&quot;0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;searchKey&quot;:&quot;245&quot;,&quot;pageID&quot;:0,&quot;location&quot;:0,&quot;payerType&quot;:0,&quot;payerSource&quot;:0,&quot;status&quot;:1,&quot;onlyAuthRequiredClient&quot;:0,&quot;clinician&quot;:0,&quot;caseManager&quot;:0,&quot;QA&quot;:0,&quot;CareType&quot;:0,&quot;lob&quot;:0,&quot;PatientType&quot;:0,&quot;scheduleStartDate&quot;:&quot;&quot;,&quot;scheduleEndDate&quot;:&quot;&quot;,&quot;ShowAllClients&quot;:0,&quot;ShowMissedVisitClients&quot;:1,&quot;ShowAllLOB&quot;:0,&quot;LOBMultiSelect&quot;:&quot;&quot;,&quot;TeamMultiSelect&quot;:&quot;&quot;,&quot;ClientStatus&quot;:&quot;Active,PSOC,TIFF,Hold,Disch,Inactive,&quot;,&quot;LocationMultiSelect&quot;:&quot;&quot;,&quot;IsMSPCLaim&quot;:0,&quot;IsClientsAllAdmits&quot;:0,&quot;SMSEnabled&quot;:0,&quot;IsListOnlyOASISClients&quot;:0,&quot;IncludeIntake&quot;:0,&quot;ShowOnlyPCAClients&quot;:0,&quot;IsonlyCDSClients&quot;:2,&quot;NotifydEnabled&quot;:0,&quot;showonlyNotAttachedtoEmployer&quot;:0,&quot;Context&quot;:&quot;GlobalSearch&quot;,&quot;POCStatus&quot;:&quot;0&quot;,&quot;FOBAllocated&quot;:&quot;0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;searchKey&quot;:&quot;&quot;,&quot;pageID&quot;:0,&quot;location&quot;:0,&quot;payerType&quot;:0,&quot;payerSource&quot;:0,&quot;status&quot;:1,&quot;onlyAuthRequiredClient&quot;:0,&quot;clinician&quot;:0,&quot;caseManager&quot;:0,&quot;QA&quot;:0,&quot;CareType&quot;:0,&quot;lob&quot;:0,&quot;PatientType&quot;:0,&quot;scheduleStartDate&quot;:&quot;&quot;,&quot;scheduleEndDate&quot;:&quot;&quot;,&quot;ShowAllClients&quot;:0,&quot;ShowMissedVisitClients&quot;:1,&quot;ShowAllLOB&quot;:0,&quot;LOBMultiSelect&quot;:&quot;&quot;,&quot;TeamMultiSelect&quot;:&quot;&quot;,&quot;ClientStatus&quot;:&quot;Active,PSOC,TIFF,Hold,Disch,Inactive,&quot;,&quot;LocationMultiSelect&quot;:&quot;&quot;,&quot;IsMSPCLaim&quot;:0,&quot;IsClientsAllAdmits&quot;:0,&quot;SMSEnabled&quot;:0,&quot;IsListOnlyOASISClients&quot;:0,&quot;IncludeIntake&quot;:0,&quot;ShowOnlyPCAClients&quot;:0,&quot;IsonlyCDSClients&quot;:2,&quot;NotifydEnabled&quot;:0,&quot;showonlyNotAttachedtoEmployer&quot;:0,&quot;Context&quot;:&quot;GlobalSearch&quot;,&quot;POCStatus&quot;:&quot;0&quot;,&quot;FOBAllocated&quot;:&quot;0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;searchKey&quot;:&quot;au&quot;,&quot;pageID&quot;:0,&quot;location&quot;:0,&quot;payerType&quot;:0,&quot;payerSource&quot;:0,&quot;status&quot;:1,&quot;onlyAuthRequiredClient&quot;:0,&quot;clinician&quot;:0,&quot;caseManager&quot;:0,&quot;QA&quot;:0,&quot;CareType&quot;:0,&quot;lob&quot;:0,&quot;PatientType&quot;:0,&quot;scheduleStartDate&quot;:&quot;&quot;,&quot;scheduleEndDate&quot;:&quot;&quot;,&quot;ShowAllClients&quot;:0,&quot;ShowMissedVisitClients&quot;:1,&quot;ShowAllLOB&quot;:0,&quot;LOBMultiSelect&quot;:&quot;&quot;,&quot;TeamMultiSelect&quot;:&quot;&quot;,&quot;ClientStatus&quot;:&quot;Active,PSOC,TIFF,Hold,Disch,Inactive,&quot;,&quot;LocationMultiSelect&quot;:&quot;&quot;,&quot;IsMSPCLaim&quot;:0,&quot;IsClientsAllAdmits&quot;:0,&quot;SMSEnabled&quot;:0,&quot;IsListOnlyOASISClients&quot;:0,&quot;IncludeIntake&quot;:0,&quot;ShowOnlyPCAClients&quot;:0,&quot;IsonlyCDSClients&quot;:2,&quot;NotifydEnabled&quot;:0,&quot;showonlyNotAttachedtoEmployer&quot;:0,&quot;Context&quot;:&quot;GlobalSearch&quot;,&quot;POCStatus&quot;:&quot;0&quot;,&quot;FOBAllocated&quot;:&quot;0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/_CL_GetClientStatusFromSession</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;searchKey&quot;:&quot;auto&quot;,&quot;pageID&quot;:0,&quot;location&quot;:0,&quot;payerType&quot;:0,&quot;payerSource&quot;:0,&quot;status&quot;:1,&quot;onlyAuthRequiredClient&quot;:0,&quot;clinician&quot;:0,&quot;caseManager&quot;:0,&quot;QA&quot;:0,&quot;CareType&quot;:0,&quot;lob&quot;:0,&quot;PatientType&quot;:0,&quot;scheduleStartDate&quot;:&quot;&quot;,&quot;scheduleEndDate&quot;:&quot;&quot;,&quot;ShowAllClients&quot;:0,&quot;ShowMissedVisitClients&quot;:1,&quot;ShowAllLOB&quot;:0,&quot;LOBMultiSelect&quot;:&quot;&quot;,&quot;TeamMultiSelect&quot;:&quot;&quot;,&quot;ClientStatus&quot;:&quot;Active,PSOC,TIFF,Hold,Disch,Inactive,&quot;,&quot;LocationMultiSelect&quot;:&quot;&quot;,&quot;IsMSPCLaim&quot;:0,&quot;IsClientsAllAdmits&quot;:0,&quot;SMSEnabled&quot;:0,&quot;IsListOnlyOASISClients&quot;:0,&quot;IncludeIntake&quot;:0,&quot;ShowOnlyPCAClients&quot;:0,&quot;IsonlyCDSClients&quot;:2,&quot;NotifydEnabled&quot;:0,&quot;showonlyNotAttachedtoEmployer&quot;:0,&quot;Context&quot;:&quot;GlobalSearch&quot;,&quot;POCStatus&quot;:&quot;0&quot;,&quot;FOBAllocated&quot;:&quot;0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetClientsRefreshBySearchKey_JSON</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetClientDetailsByGlobalSearch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Clientid&quot;:83584}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetClientDetailsByGlobalSearch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx?fromPlace=MasterSearch&amp;ClientId=83584" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromPlace" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromPlace</stringProp>
                  <stringProp name="Argument.value">MasterSearch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ClientId</stringProp>
                  <stringProp name="Argument.value">83584</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">20062.0</stringProp>
              <stringProp name="ConstantTimer.delay">10031</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 20062 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/GetEpisodeWiseScheduleDetails" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;episodeID&quot;:&quot;148229&quot;,&quot;StartDate&quot;:&quot;01/01/2023&quot;,&quot;EndDate&quot;:&quot;03/01/2023&quot;,&quot;IncludeDeletedSchedule&quot;:&quot;0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/GetEpisodeWiseScheduleDetails</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/GetAssessmentList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;episodeID&quot;:&quot;148229&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/GetAssessmentList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/GetclientDocuments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;episodeID&quot;:&quot;148229&quot;,&quot;clientID&quot;:&quot;83584&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/GetclientDocuments</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/ListAllAuthorizationsForClientEpisode" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;episodeID&quot;:&quot;148229&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/ListAllAuthorizationsForClientEpisode</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/GetSubFormList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;episodeID&quot;:&quot;148229&quot;,&quot;StartDate&quot;:&quot;&quot;,&quot;EndDate&quot;:&quot;&quot;,&quot;ClientId&quot;:&quot;83584&quot;,&quot;fromPage&quot;:&quot;Episode&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/GetSubFormList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetSession_GlobalSearch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetSession_GlobalSearch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AuditAjax.aspx/GetClickAuditConfig" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;TokenTime&quot;:&quot;2023-08-09 06:04:38&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AuditAjax.aspx/GetClickAuditConfig</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/up_GetEpisodeWiseAssessmentForCalendarView" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;episodeID&quot;:&quot;148229&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/up_GetEpisodeWiseAssessmentForCalendarView</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/Episode.aspx/GetOrdersList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;location&quot;:0,&quot;CaseManager&quot;:0,&quot;Payer&quot;:0,&quot;Client&quot;:&quot;83584&quot;,&quot;Status&quot;:&quot;0&quot;,&quot;ChkEFax&quot;:&quot;0&quot;,&quot;EFax&quot;:0,&quot;ChkAdvancedFilter&quot;:&quot;0&quot;,&quot;ChkApproved&quot;:&quot;0&quot;,&quot;Approved&quot;:0,&quot;OrderType&quot;:&quot;0&quot;,&quot;Physician&quot;:0,&quot;ChkOrderDate&quot;:&quot;0&quot;,&quot;OrderDateFrom&quot;:&quot;&quot;,&quot;OrderDateTo&quot;:&quot;&quot;,&quot;ChkEpisodeStart&quot;:&quot;0&quot;,&quot;EpisodeStartFrom&quot;:&quot;&quot;,&quot;EpisodeStartTo&quot;:&quot;&quot;,&quot;ChkEpisodeEnd&quot;:&quot;0&quot;,&quot;EpisodeEndFrom&quot;:&quot;&quot;,&quot;EpisodeEndTo&quot;:&quot;&quot;,&quot;ChkRNSigned&quot;:&quot;0&quot;,&quot;RNSignedFrom&quot;:&quot;&quot;,&quot;RNSignedTo&quot;:&quot;&quot;,&quot;ChkPhysicianSigned&quot;:&quot;0&quot;,&quot;PhysicianSignedFrom&quot;:&quot;&quot;,&quot;PhysicianSignedTo&quot;:&quot;&quot;,&quot;ChkFaxedOn&quot;:&quot;0&quot;,&quot;FaxedOnFrom&quot;:&quot;&quot;,&quot;FaxedOnTo&quot;:&quot;&quot;,&quot;ChkSearch&quot;:&quot;0&quot;,&quot;Search&quot;:&quot;&quot;,&quot;ChkOrderCreatedBy&quot;:&quot;0&quot;,&quot;OrderCreatedBy&quot;:0,&quot;ChkSignedRN&quot;:&quot;0&quot;,&quot;SignedRN&quot;:0,&quot;ChkOrderApprovedBy&quot;:&quot;0&quot;,&quot;OrderApprovedBy&quot;:0,&quot;ChkOrderApproved&quot;:&quot;0&quot;,&quot;OrderApprovedFrom&quot;:&quot;&quot;,&quot;OrderApprovedTo&quot;:&quot;&quot;,&quot;sortKey&quot;:9,&quot;sortDirection&quot;:0,&quot;pageNo&quot;:1,&quot;EpisodeID&quot;:&quot;148229&quot;,&quot;Purpose&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/Episode.aspx/GetOrdersList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/EpisodeManagement/eChartManager.aspx?eChartMasterID=1923171&amp;fromPage=1&amp;ChartType=0&amp;ChartId=0&amp;CgTaskID=10147871" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CgTaskID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CgTaskID</stringProp>
                  <stringProp name="Argument.value">10147871</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fromPage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromPage</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ChartType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ChartType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ChartId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ChartId</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="eChartMasterID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eChartMasterID</stringProp>
                  <stringProp name="Argument.value">1923171</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/EpisodeManagement/eChartManager.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">11127.0</stringProp>
              <stringProp name="ConstantTimer.delay">5563.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 11127 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetSessionInfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetSessionInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/_VC_GetVitalsListofVisitNote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CGTaskID&quot;:&quot;10147871&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/_VC_GetVitalsListofVisitNote</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/StickyNoteMaster.aspx/GetStickyNote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;HHA&quot;:&quot;901246&quot;,&quot;UserID&quot;:&quot;1&quot;,&quot;CgTaskID&quot;:&quot;10147871&quot;,&quot;DataSetID&quot;:0,&quot;echartMasterID&quot;:&quot;1923171&quot;,&quot;ClientID&quot;:&quot;83584&quot;,&quot;PageID&quot;:&quot;1268&quot;,&quot;SubFormReferenceType&quot;:&quot;&quot;,&quot;SubFormReferenceID&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/StickyNoteMaster.aspx/GetStickyNote</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/_VC_GetAddendumNotes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CgtaskID&quot;:&quot;10147871&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/_VC_GetAddendumNotes</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/_VC_GetLateEntryNotes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CgtaskID&quot;:&quot;10147871&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/_VC_GetLateEntryNotes</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/GetClientTreatementAddress" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;ClientID&quot;:&quot;83584&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/GetClientTreatementAddress</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/GetOutsideLocationReasonCodes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CgTaskID&quot;:&quot;10147871&quot;,&quot;PayerID&quot;:&quot;0&quot;,&quot;ClientID&quot;:&quot;0&quot;,&quot;EvvVendorVersionID&quot;:&quot;6&quot;,&quot;EnableHHAExchange&quot;:&quot;1&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/GetOutsideLocationReasonCodes</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx?G2lGuL1TE6sx7me1tEF9o%2f0tDf1n0YlmXb55bkvYdKgXyEUz2N7E4gKxUwR2Tv6Xp8GMuT4h12xRWUHSQVUhPcsw1cFP638Z7kAVTfJl7cnsaDi4HIZWdHpyZYCEH5hviueF62DNdnUGF1iqa2flQhSn7GToOJuK0lnF4IrlPMhZ4QWJ3UziNLssXHMwnQiiaZqXJ0MFbpwlq3cypxuetlj4QNjSNX8H0DSd3ixIfFKM%2f3yCt4vbHA=%3d" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="G2lGuL1TE6sx7me1tEF9o/0tDf1n0YlmXb55bkvYdKgXyEUz2N7E4gKxUwR2Tv6Xp8GMuT4h12xRWUHSQVUhPcsw1cFP638Z7kAVTfJl7cnsaDi4HIZWdHpyZYCEH5hviueF62DNdnUGF1iqa2flQhSn7GToOJuK0lnF4IrlPMhZ4QWJ3UziNLssXHMwnQiiaZqXJ0MFbpwlq3cypxuetlj4QNjSNX8H0DSd3ixIfFKM/3yCt4vbHA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">G2lGuL1TE6sx7me1tEF9o/0tDf1n0YlmXb55bkvYdKgXyEUz2N7E4gKxUwR2Tv6Xp8GMuT4h12xRWUHSQVUhPcsw1cFP638Z7kAVTfJl7cnsaDi4HIZWdHpyZYCEH5hviueF62DNdnUGF1iqa2flQhSn7GToOJuK0lnF4IrlPMhZ4QWJ3UziNLssXHMwnQiiaZqXJ0MFbpwlq3cypxuetlj4QNjSNX8H0DSd3ixIfFKM/3yCt4vbHA</stringProp>
                  <stringProp name="Argument.value">=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sessionPersistanceFlag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sessionPersistanceFlag</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DocTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DocTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckOutEVVTokenCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckOutEVVTokenCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPPOCDiscussed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPPOCDiscussed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_OutputTimeRow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_OutputTimeRow</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Hdn_IsLocationMandateforEVV" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Hdn_IsLocationMandateforEVV</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EvvScheduleConfigurationGroupID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EvvScheduleConfigurationGroupID</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CompleteDocIsCheckInorCheOutClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CompleteDocIsCheckInorCheOutClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_captureGeoLocationForAllVisits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_captureGeoLocationForAllVisits</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnFormActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnFormActions</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_HCPCSCodewithinEffectivePeriod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_HCPCSCodewithinEffectivePeriod</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartType_New" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartType_New</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_UnapprovalNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_UnapprovalNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Hdn_EnableVoiceRecording" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Hdn_EnableVoiceRecording</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_islockeduser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_islockeduser</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="eChartMasterPageView_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eChartMasterPageView_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPDocuments" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPDocuments</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AttestationMandatoryEvent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AttestationMandatoryEvent</stringProp>
                  <stringProp name="Argument.value">AT_APPROVAL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CurrentForm485Id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CurrentForm485Id</stringProp>
                  <stringProp name="Argument.value">148279</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsEVVExported" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsEVVExported</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isChartClinicianChanged" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isChartClinicianChanged</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_FinalSubmittedOn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_FinalSubmittedOn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DecodedFOBCheckoutTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DecodedFOBCheckoutTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:0,&quot;index&quot;:&quot;4&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ShowCopyButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ShowCopyButton</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_enable_expanded_time_for_overage_hours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_enable_expanded_time_for_overage_hours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnMandatoryItems" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnMandatoryItems</stringProp>
                  <stringProp name="Argument.value">VITAL_TEMP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MandateLanguageInterpreter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MandateLanguageInterpreter</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsSignRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsSignRequired</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_HHAFormId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_HHAFormId</stringProp>
                  <stringProp name="Argument.value">3746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_doNotAllowConcurrentEditingOfVisitNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_doNotAllowConcurrentEditingOfVisitNotes</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ISTabChanged" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ISTabChanged</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Modifiers1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Modifiers1</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Modifiers2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Modifiers2</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartEvvGeoFencingNolocationIsHardstop" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartEvvGeoFencingNolocationIsHardstop</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ChangeOrderId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ChangeOrderId</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsTherapyRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsTherapyRequired</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txtArea_AddendumNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txtArea_AddendumNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Echart_HomeboundStatusRegularVisit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Echart_HomeboundStatusRegularVisit</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isCheckoutModified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isCheckoutModified</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_HHAPocId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_HHAPocId</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IS_Donotallowstartdocumentation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IS_Donotallowstartdocumentation</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Is_PrimaryEVVVendor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Is_PrimaryEVVVendor</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanAutoSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanAutoSave</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DonotAllowCheckoutBeforeDocumentationCompletion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DonotAllowCheckoutBeforeDocumentationCompletion</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Endometab_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Endometab_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SelectedCcContactsIDs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SelectedCcContactsIDs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MandateDiagnosisCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MandateDiagnosisCodes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ShowCopTabforAssessment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ShowCopTabforAssessment</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SaveheaderInfo_AutoSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SaveheaderInfo_AutoSave</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_enableMandatePrimarySkillForChartSubmission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_enableMandatePrimarySkillForChartSubmission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_LocationReasoncode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_LocationReasoncode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PrimarySkillSelected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PrimarySkillSelected</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartEvvCheckinCheckoutMandateSystemTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartEvvCheckinCheckoutMandateSystemTime</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Echart_HomeboundStatusSupervisoryVisit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Echart_HomeboundStatusSupervisoryVisit</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_ShowFieldsVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_ShowFieldsVal</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsDirectCheckin_Checkout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsDirectCheckin_Checkout</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPPatientRepresentatives" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPPatientRepresentatives</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txtarea_SendforCorrectionNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txtarea_SendforCorrectionNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AddendumNotes_AddebyID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AddendumNotes_AddebyID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_QANotes_AddebyID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_QANotes_AddebyID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EVVVendorversionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EVVVendorversionID</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsOverHourSplitEnabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsOverHourSplitEnabled</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_fob_checkin_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_fob_checkin_code</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_is_adjudicated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_is_adjudicated</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ApprovedOn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ApprovedOn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditDiagnosis" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditDiagnosis</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SendBackToClinicianButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SendBackToClinicianButtonStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanApprove</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isChartClinicianChangedShowalertforClinician" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isChartClinicianChangedShowalertforClinician</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AlloweFuturedateChartDocumentation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AlloweFuturedateChartDocumentation</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_allowToEditSubmittedNote" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_allowToEditSubmittedNote</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CClIstNames" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CClIstNames</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isSubmitApprove</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SupervisoryServiceCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SupervisoryServiceCategory</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_COP_PatientRepresentativeWarning" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_COP_PatientRepresentativeWarning</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="LinkNum" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">LinkNum</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EnableCopyButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EnableCopyButton</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnServiceHCPCSCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnServiceHCPCSCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckInEVVTokenCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckInEVVTokenCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsDirect_Checkin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsDirect_Checkin</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditCareplan" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditCareplan</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AllowConcurrentEditOfVisitNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AllowConcurrentEditOfVisitNotes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PermissionforPayerHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PermissionforPayerHours</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DecodedFOBCheckinTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DecodedFOBCheckinTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_IntakeTimeCountv2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_IntakeTimeCountv2</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanSplitsSchedule" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanSplitsSchedule</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_splitserviceExists" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_splitserviceExists</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_TravelTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_TravelTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Resp_txt_Comment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Resp_txt_Comment</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TheraphyformLibraryformidActive" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TheraphyformLibraryformidActive</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_MinMaxDuration" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_MinMaxDuration</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Subforms_Submissionerrors" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Subforms_Submissionerrors</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubmittedOn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubmittedOn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_ClientHasAideService" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_ClientHasAideService</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MandatePatientTolerated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MandatePatientTolerated</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ClientCareType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ClientCareType</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SelectedAcuityValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SelectedAcuityValue</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PermissionForCheckInORout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PermissionForCheckInORout</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditPOCItems18To20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditPOCItems18To20</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnTodayDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnTodayDate</stringProp>
                  <stringProp name="Argument.value">08/09/2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_enableHHAGeoFencing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_enableHHAGeoFencing</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_StartDOCGracePeriod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_StartDOCGracePeriod</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_HHA_MandateShowAcuity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_HHA_MandateShowAcuity</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_OverHoursNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_OverHoursNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MandateStandardPrecautions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MandateStandardPrecautions</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SaveButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SaveButtonStatus</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_BlockCheckInCheckoutForPastVisitsDays" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_BlockCheckInCheckoutForPastVisitsDays</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isChartLockedForEditing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isChartLockedForEditing</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsTimeEdited_Checkout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsTimeEdited_Checkout</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$txtSupervisoryExplain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$txtSupervisoryExplain</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DisableCheckInCheckOutTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DisableCheckInCheckOutTime</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Mandate_TAL_FormLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Mandate_TAL_FormLevel</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="FieldSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">FieldSize</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsEnableEVVTokenCodeforCheckIn_Out" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsEnableEVVTokenCodeforCheckIn_Out</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_VitalNote" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_VitalNote</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubmissionInterventionsRules" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubmissionInterventionsRules</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AddendumNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AddendumNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ClientAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ClientAddress</stringProp>
                  <stringProp name="Argument.value">Client Address, dallas , Schenectady, NY, 12345</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanShow_Validate_ReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanShow_Validate_ReasonCode</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PlaceofService" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PlaceofService</stringProp>
                  <stringProp name="Argument.value">Patient&apos;s Home Residence</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnCanShowPrimarySkills" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnCanShowPrimarySkills</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanCaptureLocationforAutoSplitAtMidnight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanCaptureLocationforAutoSplitAtMidnight</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPMedicationInstructions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPMedicationInstructions</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_COPAdvanceDirectives" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_COPAdvanceDirectives</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EnableAutoSplitforAdditionalHoursAtStartTimeandEndTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EnableAutoSplitforAdditionalHoursAtStartTimeandEndTime</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_NotesSaveClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_NotesSaveClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$GU_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$GU_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPDischargePlan" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPDischargePlan</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_IntakeTimeRowv2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_IntakeTimeRowv2</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isClientSignedChart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isClientSignedChart</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AutoSplitWhenActualHrsExceedPlannedHrsGraceMinutes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AutoSplitWhenActualHrsExceedPlannedHrsGraceMinutes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CurrentServerDateTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CurrentServerDateTime</stringProp>
                  <stringProp name="Argument.value">8/9/2023 11:35:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsRaiseExceptionWhenboth_CS_VR_areMissed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsRaiseExceptionWhenboth_CS_VR_areMissed</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubformsRequireClientSignMandatory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubformsRequireClientSignMandatory</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SendforCorrectionNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SendforCorrectionNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TotalVisitedHoursWarning" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TotalVisitedHoursWarning</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Autofill485ItemsValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Autofill485ItemsValue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_OpenEVVVisitLocationDivID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_OpenEVVVisitLocationDivID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DynamicAttestationMessage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DynamicAttestationMessage</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="drplst_ModifiertoEdit_1_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">drplst_ModifiertoEdit_1_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="drplst_ModifiertoEdit_2_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">drplst_ModifiertoEdit_2_ClientState</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AidCarePlanType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AidCarePlanType</stringProp>
                  <stringProp name="Argument.value">KantimeDefault</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Gait_txt_Comments" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Gait_txt_Comments</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="eChartMasterTabStrip_ClientState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eChartMasterTabStrip_ClientState</stringProp>
                  <stringProp name="Argument.value">{&quot;selectedIndexes&quot;:[&quot;4&quot;],&quot;logEntries&quot;:[],&quot;scrollState&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPEmergencyContacts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPEmergencyContacts</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ForceAutoSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ForceAutoSave</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_daily_variable_overage_min" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_daily_variable_overage_min</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_FaxMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_FaxMethod</stringProp>
                  <stringProp name="Argument.value">@metrofax.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_LocationReasoncodeDesc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_LocationReasoncodeDesc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ComposeButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ComposeButtonStatus</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Cv_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Cv_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartAutoSaveTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartAutoSaveTime</stringProp>
                  <stringProp name="Argument.value">25000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Hdn_GeoLocationCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Hdn_GeoLocationCodes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="drpSignatureAttendant" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">drpSignatureAttendant</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                  <stringProp name="Argument.value">B7BE05E9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_defaultCheckinTime_forEVV" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_defaultCheckinTime_forEVV</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartLastLockedSessionUserGUID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartLastLockedSessionUserGUID</stringProp>
                  <stringProp name="Argument.value">7B2AE8A2-C295-42E4-9175-F33839AEC1F0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnHCPCS_Code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnHCPCS_Code</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TreatmentAddressID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TreatmentAddressID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_enableSplitServiceDocumentation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_enableSplitServiceDocumentation</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_StartDocumentClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_StartDocumentClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanSaveCheckin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanSaveCheckin</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnIsChartOrderRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnIsChartOrderRequired</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_checkintime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_checkintime</stringProp>
                  <stringProp name="Argument.value">07:00 PM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MandatoryCarePlans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MandatoryCarePlans</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsDirect_Checkout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsDirect_Checkout</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_VisitChartStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_VisitChartStatus</stringProp>
                  <stringProp name="Argument.value">Prepared</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Form485Type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Form485Type</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AttendantServiceCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AttendantServiceCategory</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Muscilo_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Muscilo_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_GUID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_GUID</stringProp>
                  <stringProp name="Argument.value">32289222-9636-44E2-8412-0E824455AFBD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_checkouttime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_checkouttime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartLastLockedSessionId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartLastLockedSessionId</stringProp>
                  <stringProp name="Argument.value">3836756</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Ent_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Ent_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Clientsignsignaturesection" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Clientsignsignaturesection</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isEditChartClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isEditChartClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="drpSupervisorClini" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">drpSupervisorClini</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckOutLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckOutLocation</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartEvvGeoFencingMaxDistanceMeters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartEvvGeoFencingMaxDistanceMeters</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AttestationMandatoryForAllReasonCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AttestationMandatoryForAllReasonCodes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_RequireSubmissionPDNNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_RequireSubmissionPDNNotes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ISBillingGCodeConfirmed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ISBillingGCodeConfirmed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ISPlaceOfServiceConfirmationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ISPlaceOfServiceConfirmationRequired</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_printwound" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_printwound</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanSaveCheckOut" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanSaveCheckOut</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubmissionNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubmissionNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CaregiverHaveAccesstoSendSMS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CaregiverHaveAccesstoSendSMS</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PermissionForMiles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PermissionForMiles</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPTeachingOnManaging" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPTeachingOnManaging</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsPrimarySkillChecked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsPrimarySkillChecked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_LocationNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_LocationNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IssendBackToClinician" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IssendBackToClinician</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ScheduleNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ScheduleNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Ispreformsave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Ispreformsave</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckinTreatmentAddressID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckinTreatmentAddressID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_PatientIdentificationNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_PatientIdentificationNotes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Hidefields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Hidefields</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnTomrrowDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnTomrrowDate</stringProp>
                  <stringProp name="Argument.value">08/10/2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PediSNVisitCopyPrevCgtaskId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PediSNVisitCopyPrevCgtaskId</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_AllowWithinLimits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_AllowWithinLimits</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ddl_PlaceofServices" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ddl_PlaceofServices</stringProp>
                  <stringProp name="Argument.value">19</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_PrevCgtaskID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_PrevCgtaskID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ParentEndTimeDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ParentEndTimeDate</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckOutLocationReasoncodeDesc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckOutLocationReasoncodeDesc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsManualEntry_Checkout" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsManualEntry_Checkout</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SMSCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SMSCodes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Nutrition_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Nutrition_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_CoPTabwarning" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_CoPTabwarning</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AllowCliniciandocumentationwithoutcheckin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AllowCliniciandocumentationwithoutcheckin</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TotalTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TotalTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ApproveButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ApproveButtonStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="checkInOutSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">checkInOutSource</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditDiagnosis_AllRecords" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditDiagnosis_AllRecords</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TypeCaregiverInstruction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TypeCaregiverInstruction</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubmitButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubmitButtonStatus</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TabUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TabUrl</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_OtherAvailableSupportAble_WilliningtoAssist_out" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_OtherAvailableSupportAble_WilliningtoAssist_out</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_defaultCheckoutTime_forEVV" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_defaultCheckoutTime_forEVV</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsAttestedforthisVisit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsAttestedforthisVisit</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_RequireIncident" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_RequireIncident</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditPOCItems18To20_AllRecords" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditPOCItems18To20_AllRecords</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Hdn_Old_GeoLocationCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Hdn_Old_GeoLocationCodes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Neuro_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Neuro_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AddendumNotes_AddeOn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AddendumNotes_AddeOn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CurrentServerTimeFromSQL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CurrentServerTimeFromSQL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Is_IncidentReport_SF19_Form_Enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Is_IncidentReport_SF19_Form_Enabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_LatestVentFormId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_LatestVentFormId</stringProp>
                  <stringProp name="Argument.value">610</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TheraphyformLibraryformid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TheraphyformLibraryformid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsTherapyDone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsTherapyDone</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartLastLockedSessionUserID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartLastLockedSessionUserID</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_FallBackDateNovember" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_FallBackDateNovember</stringProp>
                  <stringProp name="Argument.value">11/5/2023 2:01:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_FallRiskAssessmentId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_FallRiskAssessmentId</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_OutputTimeRowv2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_OutputTimeRowv2</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AvailablePOCItemsineCharts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AvailablePOCItemsineCharts</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Checkoutsource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Checkoutsource</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_daily_fixed_overage_min" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_daily_fixed_overage_min</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AllowDuplicateICDCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AllowDuplicateICDCodes</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isCheckinModified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isCheckinModified</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_BlockManualTimeEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_BlockManualTimeEntry</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Oldtotalsplittedservices" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Oldtotalsplittedservices</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsAttendantSignRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsAttendantSignRequired</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnSupervisionofHHAID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnSupervisionofHHAID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsTimeEdited_Checkin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsTimeEdited_Checkin</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Miles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Miles</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_caretype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_caretype</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnRequireCliniSignTemplate2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnRequireCliniSignTemplate2</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ParentSignatureRequires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ParentSignatureRequires</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Payerhours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Payerhours</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ShowAcuity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ShowAcuity</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ShowSubmissionNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ShowSubmissionNotes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsDocumenttimenabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsDocumenttimenabled</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_LanguageInterpreter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_LanguageInterpreter</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TwilioHHAPhoneNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TwilioHHAPhoneNumber</stringProp>
                  <stringProp name="Argument.value">+11111111111</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EditedTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EditedTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Continueifcheckinpresent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Continueifcheckinpresent</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_OldCheckOutTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_OldCheckOutTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_RequireOfficeStaffSignSection" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_RequireOfficeStaffSignSection</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsEVVScheduleWtoutConsideringScheduleStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsEVVScheduleWtoutConsideringScheduleStatus</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_SupervisorClini" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_SupervisorClini</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_QANotes_AddebyName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_QANotes_AddebyName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Echart_HomeboundStatusAss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Echart_HomeboundStatusAss</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_IntakeTimeRow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_IntakeTimeRow</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IsOutsidefenceWithOutReason" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">IsOutsidefenceWithOutReason</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TreatmentLocationAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TreatmentLocationAddress</stringProp>
                  <stringProp name="Argument.value">Client Address - dallas ,Schenectady,NY,12345</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DXChangesRequireChangeOrderAfterPOCLock" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DXChangesRequireChangeOrderAfterPOCLock</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SpringForwardDateMarch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SpringForwardDateMarch</stringProp>
                  <stringProp name="Argument.value">3/12/2023 2:01:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$txtSupervisionComments" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$txtSupervisionComments</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="LinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">LinkName</stringProp>
                  <stringProp name="Argument.value">,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_schedule_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_schedule_type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isConfirmed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isConfirmed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Pain_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Pain_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CaregiverSpecialInstruction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CaregiverSpecialInstruction</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ConfirmOutsideLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ConfirmOutsideLocation</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DoNotAllowToSubmitBeforePlannedCheckoutTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DoNotAllowToSubmitBeforePlannedCheckoutTime</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_is_md_visit_filled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_is_md_visit_filled</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckOutLocationReasoncode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckOutLocationReasoncode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_IntakeTimeCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_IntakeTimeCount</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AttestationHideFromClinician" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AttestationHideFromClinician</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckInLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckInLocation</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_RequireCaseManagerSignSection" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_RequireCaseManagerSignSection</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_LocationStatusVerfied_CheckOut" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_LocationStatusVerfied_CheckOut</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Hdn_CheckoutTime_SubmitDocContinue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Hdn_CheckoutTime_SubmitDocContinue</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_deletebuttonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_deletebuttonStatus</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__SCROLLPOSITIONY" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__SCROLLPOSITIONY</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__SCROLLPOSITIONX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__SCROLLPOSITIONX</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsCrossedMidnight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsCrossedMidnight</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_DocumentationTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_DocumentationTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnIndirectSupervisionofHHAID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdnIndirectSupervisionofHHAID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MandateTimeeditedManualentry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MandateTimeeditedManualentry</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TestMidnightTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TestMidnightTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CaregiverMobileNumberForSMS" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CaregiverMobileNumberForSMS</stringProp>
                  <stringProp name="Argument.value">(000) 000-0000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AllowtoEdittheChart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AllowtoEdittheChart</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PendingSecforMidnight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PendingSecforMidnight</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isrequiremdvisit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isrequiremdvisit</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ISPlaceOfServiceConfirmed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ISPlaceOfServiceConfirmed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsShowScheduleNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsShowScheduleNotes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanEdittheForm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanEdittheForm</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckOutTreatmentLocationAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckOutTreatmentLocationAddress</stringProp>
                  <stringProp name="Argument.value">Client Address - dallas ,Schenectady,NY,12345</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eFaxPhysicianName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eFaxPhysicianName</stringProp>
                  <stringProp name="Argument.value">1, austin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_fob_checkout_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_fob_checkout_code</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_careCoordination" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_careCoordination</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ClientSpecialInstruction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ClientSpecialInstruction</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CgtaskID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CgtaskID</stringProp>
                  <stringProp name="Argument.value">10147871</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Form485Status" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Form485Status</stringProp>
                  <stringProp name="Argument.value">Awaiting Physician signature</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_HasError" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_HasError</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SaveHeaderAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SaveHeaderAction</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EVVSchedule" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EVVSchedule</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_Miles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_Miles</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ClientSignUndoCheckInorCheOutClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ClientSignUndoCheckInorCheOutClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Chart_StatusNew" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Chart_StatusNew</stringProp>
                  <stringProp name="Argument.value">Open</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_VitalSignOutofNormalRange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_VitalSignOutofNormalRange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_echartMasterId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_echartMasterId</stringProp>
                  <stringProp name="Argument.value">1923171</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CustomFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CustomFields</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                  <stringProp name="Argument.value">eChartMasterTabStrip</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_FillPHysicianAccetpanceOfPOCBoxInEvals" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_FillPHysicianAccetpanceOfPOCBoxInEvals</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isSupervisroyCliniSignRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isSupervisroyCliniSignRequired</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_UAForm_URL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_UAForm_URL</stringProp>
                  <stringProp name="Argument.value">PediatricRegularVisit.ascx</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="OasisFormScriptManager_TSM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OasisFormScriptManager_TSM</stringProp>
                  <stringProp name="Argument.value">;;AjaxControlToolkit, Version=4.1.40412.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:b93fd0f6-30b7-4faa-b878-b710fb0b4df6:ea597d4b:b25378d2;Telerik.Web.UI, Version=2013.3.1015.40, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:ac331549-681c-4402-9fb7-09ec3c579ee8:16e4e7cd:f7645509:24ee1bba:e330518b:1e771326:88144a7a:8e6f0d33:6a6d718d:2003d0b8:f46195d3:aa288e2d</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubmissionMedicationRules" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubmissionMedicationRules</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_LocationStatusVerfied_CheckIn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_LocationStatusVerfied_CheckIn</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ISChartClinicianHavingLoginId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ISChartClinicianHavingLoginId</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_isSigned" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_isSigned</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ClientSignIsCheckInorCheOutClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ClientSignIsCheckInorCheOutClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsVisitLocationdivClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsVisitLocationdivClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_UnLockButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_UnLockButtonStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckoutTreatmentAddressID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckoutTreatmentAddressID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txt_ConcurrenteditingComments" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txt_ConcurrenteditingComments</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Mandate_TAL_LOBLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Mandate_TAL_LOBLevel</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartMasterID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartMasterID</stringProp>
                  <stringProp name="Argument.value">1923171</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_enableBlockActualTimeEditingFromeChartafterClientSign" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_enableBlockActualTimeEditingFromeChartafterClientSign</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ClientAddressID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ClientAddressID</stringProp>
                  <stringProp name="Argument.value">975413</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ValidatePastSchedule" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ValidatePastSchedule</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsManualEntry_Checkin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsManualEntry_Checkin</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TypeClientInstruction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TypeClientInstruction</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsFuturedatedchart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsFuturedatedchart</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_TravelTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_TravelTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CaregivertaskStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CaregivertaskStatus</stringProp>
                  <stringProp name="Argument.value">In_Progress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Mandate_Acuity_LOBLevle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Mandate_Acuity_LOBLevle</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Skin_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Skin_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_OutputTimeCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$hdn_OutputTimeCount</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_OutputTimeCountv2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$IntakeOutputSec_eChartV2_1$hdn_OutputTimeCountv2</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CoPInfectionControl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CoPInfectionControl</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Eqtp_txt_Equipment_Functioning" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Eqtp_txt_Equipment_Functioning</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ReasonCodeAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ReasonCodeAvailable</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Iv_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Iv_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnMedicationsURL_fromeChartMaster" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnMedicationsURL_fromeChartMaster</stringProp>
                  <stringProp name="Argument.value">JbX+uvCBLyIApPN9zaDmAeHCLEsoC4twB12jK084rzgFday9o0fb/Iyn5ap6JLXoFIx+PI50UzybBxkN16+7E5CaNbLbXzI5us/YiX/nJ8HYDYKCPTs/MpHLhMrKDEIW0n/21ad8phFaLe0mTo+OHld+dZj87fqjHxqIeHO13JCyVtARLzaS10cjIhdn3YlG+4/x+se7EWQVQZ82E4g0jD5hYt/WL0eF</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EnableAutoSplitforAdditionalHoursAtOnlyEndTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EnableAutoSplitforAdditionalHoursAtOnlyEndTime</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_EnableHHAExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_EnableHHAExchange</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditCareplan_AllRecords" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditCareplan_AllRecords</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdnisValidateOrdersTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdnisValidateOrdersTab</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AddendumNotes_AddebyName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AddendumNotes_AddebyName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_AideCareplanExists" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_AideCareplanExists</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ISGCodeConfirmationRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ISGCodeConfirmationRequired</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_StartDocumentionClicked" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_StartDocumentionClicked</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SupervisoryFormID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SupervisoryFormID</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CanSaveEVVTokenCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CanSaveEVVTokenCodes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_RequireStandardPrecaution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_RequireStandardPrecaution</stringProp>
                  <stringProp name="Argument.value">False</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Isinvoicecreated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Isinvoicecreated</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Hdn_ContinueWithoutCheckin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Hdn_ContinueWithoutCheckin</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_DonotAllowToEditCorrectedVisitNotes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_DonotAllowToEditCorrectedVisitNotes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubformsNotsubmittedduringApproval" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubformsNotsubmittedduringApproval</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_QANotes_AddeOn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_QANotes_AddeOn</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Activity_txt_Activity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Activity_txt_Activity</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PatientIdentification_warning" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PatientIdentification_warning</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_OldCheckInTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_OldCheckInTime</stringProp>
                  <stringProp name="Argument.value">07:00 PM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="txtArea_LateEntryPopup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">txtArea_LateEntryPopup</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_is_fob_allocated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_is_fob_allocated</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ContinueClick" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ContinueClick</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ShowErrorMessageDiv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ShowErrorMessageDiv</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Checkinsource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Checkinsource</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_PreformSaveAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_PreformSaveAction</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Modifiers_Edit1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Modifiers_Edit1</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Modifiers_Edit2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Modifiers_Edit2</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SaveContext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SaveContext</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Resp_txt_Notes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">~/UI/VisitNotes/UserControls/PediatricRegularVisit.ascx_userControl$Resp_txt_Notes</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CheckInTreatmentLocationAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CheckInTreatmentLocationAddress</stringProp>
                  <stringProp name="Argument.value">Client Address - dallas ,Schenectady,NY,12345</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditPOCItems14To17_AllRecords" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditPOCItems14To17_AllRecords</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_MidNightDateTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_MidNightDateTime</stringProp>
                  <stringProp name="Argument.value">2/2/2023 12:00:00 AM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_FriendlyFormid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_FriendlyFormid</stringProp>
                  <stringProp name="Argument.value">VN - 252</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_eChartRequirePatientIdentification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_eChartRequirePatientIdentification</stringProp>
                  <stringProp name="Argument.value">True</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_UnApproveButtonStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_UnApproveButtonStatus</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_Echart_HomeboundStatusEval" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_Echart_HomeboundStatusEval</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_HideapprovedIncidentreporteChartformsTab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_HideapprovedIncidentreporteChartformsTab</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SubFormsNotApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SubFormsNotApproved</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_CareplansmandatoryforSOCRecert" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_CareplansmandatoryforSOCRecert</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_SelectedBccContactIDs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_SelectedBccContactIDs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsTestAgency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsTestAgency</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_BlockCheckinCheckoutvalidation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_BlockCheckinCheckoutvalidation</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IncidentReportID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IncidentReportID</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_IsChartIsAlreadyOpenedfromOtherUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_IsChartIsAlreadyOpenedfromOtherUser</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_ReasonCodesCheck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_ReasonCodesCheck</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hdn_canEditPOCItems14To17" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hdn_canEditPOCItems14To17</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">21401.0</stringProp>
              <stringProp name="ConstantTimer.delay">10700.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 21401 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/AjaxUtils.aspx/GetSessionInfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/AjaxUtils.aspx/GetSessionInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/Common/StickyNoteMaster.aspx/GetStickyNote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;HHA&quot;:&quot;901246&quot;,&quot;UserID&quot;:&quot;1&quot;,&quot;CgTaskID&quot;:&quot;10147871&quot;,&quot;DataSetID&quot;:0,&quot;echartMasterID&quot;:&quot;1923171&quot;,&quot;ClientID&quot;:&quot;83584&quot;,&quot;PageID&quot;:&quot;1262&quot;,&quot;SubFormReferenceType&quot;:&quot;&quot;,&quot;SubFormReferenceID&quot;:0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/Common/StickyNoteMaster.aspx/GetStickyNote</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/VisitChart.aspx/_VC_medications_GetmedicationsAndPerformedList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cgtaskID&quot;:&quot;10147871&quot;,&quot;CurrentChart&quot;:&quot;1&quot;,&quot;MedHistory&quot;:&quot;0&quot;,&quot;StartDate&quot;:&quot;01/01/2023&quot;,&quot;EndDate&quot;:&quot;03/01/2023&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/VisitChart.aspx/_VC_medications_GetmedicationsAndPerformedList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/GetClientTreatementAddress" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;ClientID&quot;:&quot;83584&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/GetClientTreatementAddress</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/eChartMaster.aspx/GetOutsideLocationReasonCodes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CgTaskID&quot;:&quot;10147871&quot;,&quot;PayerID&quot;:&quot;0&quot;,&quot;ClientID&quot;:&quot;0&quot;,&quot;EvvVendorVersionID&quot;:&quot;6&quot;,&quot;EnableHHAExchange&quot;:&quot;1&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/eChartMaster.aspx/GetOutsideLocationReasonCodes</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx?cgtaskID=10147871&amp;FromPage=1&amp;CheckinTime=07:00%20PM&amp;CheckoutTime=&amp;ClientID83584&amp;EchartStatus=Open" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cgtaskID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cgtaskID</stringProp>
                  <stringProp name="Argument.value">10147871</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="FromPage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">FromPage</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID83584" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ClientID83584</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CheckinTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">CheckinTime</stringProp>
                  <stringProp name="Argument.value">07:00 PM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CheckoutTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CheckoutTime</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="EchartStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">EchartStatus</stringProp>
                  <stringProp name="Argument.value">Open</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">7110.0</stringProp>
              <stringProp name="ConstantTimer.delay">3555</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 7110 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_GetMedicationsList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cgtaskID&quot;:&quot;10147871&quot;,&quot;CheckInTime&quot;:&quot;07:00 PM&quot;,&quot;CheckOutTime&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_GetMedicationsList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_SaveTasksPerformed" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cgtaskID&quot;:&quot;10147871&quot;,&quot;modifiedData&quot;:&quot;2615359Â¥877950Â¥01:6 PMÂ¥Â§Â¥Â§Â¥75Â§Â¥11:00 AMÂ§Â¥Ã´0Â¥878148Â¥11:00 AMÂ¥Â§Â¥Â§Â¥75Â§Â¥09:00 AMÂ§Â¥Ã´&quot;,&quot;Deletedlist&quot;:&quot;&quot;,&quot;TeachingDataForSave&quot;:&quot;0Â¥877950Â¥0Â¥0Â¥0Â¥Ã´&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_SaveTasksPerformed</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_GetMedicationsList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cgtaskID&quot;:&quot;10147871&quot;,&quot;CheckInTime&quot;:&quot;07:00 PM&quot;,&quot;CheckOutTime&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_GetMedicationsList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://devlocal.kantimehealth.net/Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_GetMedicationsList" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cgtaskID&quot;:&quot;10147871&quot;,&quot;CheckInTime&quot;:&quot;07:00 PM&quot;,&quot;CheckOutTime&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Working/UI/VisitNotes/visitChart_MedicationsEdit.aspx/_VC_Medications_GetMedicationsList</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
